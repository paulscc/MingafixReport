[
  {
    "objectID": "tercer.html",
    "href": "tercer.html",
    "title": "Reto 1: Ciudadana Basica",
    "section": "",
    "text": "MINGAFIX API v1.0 - REST + GraphQL"
  },
  {
    "objectID": "tercer.html#documentacion",
    "href": "tercer.html#documentacion",
    "title": "Reto 1: Ciudadana Basica",
    "section": "Documentacion",
    "text": "Documentacion\nApi implementeda a traves de: Backend: Render.com BBD y Storage: Firebase Consultas: Graphql\nQu√© hace esta API? Permite que ciudadanos reporten problemas en su ciudad (baches, basura, luminarias rotas, etc.) usando su celular. Los funcionarios pueden ver estos reportes y darles tratamiento.\n¬øC√≥mo usar la API? Producci√≥n: https://renderpi.onrender.com/ (En caso de inactividad la API se demorara en encenderse alrededor de 45s)\nSe puede usar Postman en este caso se usar√° Gitbash(simplemente usare los comandos y la comunicacion se realizar√°)\n\n\n\nApp\n\n\nPROBAR LA API (Paso a Paso) Paso 1: Verificar que funcione bash curl https://renderpi.onrender.com\n        Respuesta : {\"status\": \"online\", ...}\nCrear un Reporte Para qu√© sirve: Un ciudadano reporta un problema (bache, basura, etc.) Endpoint: POST /reportes Qu√© necesitas enviar:\ncategoria: Tipo de problema (bache, basura, luminaria, acera_rota) lat: Latitud (ubicaci√≥n en el mapa) lng: Longitud (ubicaci√≥n en el mapa) descripcion: Qu√© est√° pasando usuario_id: Qui√©n est√° reportando foto: Imagen del problema (opcional)\nEjemplo con foto desde tu celular: bash# Subir una foto\ncurl -X POST https://renderpi.onrender.com/reportes\n-F ‚Äúcategoria=bache‚Äù\n-F ‚Äúlat=-0.8131‚Äù\n-F ‚Äúlng=-77.7172‚Äù\n-F ‚Äúdescripcion=Bache muy grande en la avenida‚Äù\n-F ‚Äúusuario_id=juan123‚Äù\n-F ‚Äúfoto=@/ruta/a/foto.jpg‚Äù\nEjemplo usado de codigo en video: curl -X POST https://renderpi.onrender.com/reportes\n-F ‚Äúcategoria=bache‚Äù\n-F ‚Äúlat=-0.8131‚Äù\n-F ‚Äúlng=-77.7172‚Äù\n-F ‚Äúdescripcion=Prueba test endpoint‚Äù\n-F ‚Äúusuario_id=USER-ABC-001‚Äù\n-F ‚Äúfoto=@C:/Users/OneDrive/Escritorio/foto.jpg‚Äù\nL√≠mite de Reportes Regla: Solo puedes hacer 30 reportes por minuto ¬øPor qu√©? Para evitar spam y abusos\nNo Duplicados\nRegla: No puedes reportar el mismo problema 2 veces en\nGRAPHQL (Consultas Avanzadas) Para qu√© sirve: Hacer consultas m√°s complejas de forma m√°s eficiente Endpoint: POST\nSOBRE LAS FOTOS Se guardan en Firebase Storage y esta direccion luego en la base de Datos con todos los registros de reportes\n\nGithub\nhttps://github.com/paulscc/RenderPi\n\nVideo Explicacion\nhttps://youtu.be/czEOuxzFUsY \nAuthor: Cadena Paul"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Primer reporte Mingafix",
    "section": "",
    "text": "```{column width=‚Äú100%‚Äù}\n\n\n\nApp\n\n\n```\n#Link App (movil)\nhttps://app.flutterflow.io/share/mingaf-fhn2o9?page=HomePage\n##Video Explicacion\nhttps://www.youtube.com/watch?v=zngtVqOHEoU\nAuthor: Cadena Paul"
  },
  {
    "objectID": "cuarto.html",
    "href": "cuarto.html",
    "title": "Reto 2 ‚Äì Mapa Vivo Inicial",
    "section": "",
    "text": "App"
  },
  {
    "objectID": "cuarto.html#video-explicativo",
    "href": "cuarto.html#video-explicativo",
    "title": "Reto 2 ‚Äì Mapa Vivo Inicial",
    "section": "Video Explicativo",
    "text": "Video Explicativo\nhttps://youtu.be/e2oQPsmCcAs\n\nAuthor\nPaul Cadena"
  },
  {
    "objectID": "segundo.html#documento-explicativo",
    "href": "segundo.html#documento-explicativo",
    "title": "Reto 0 Mingafix",
    "section": "Documento explicativo",
    "text": "Documento explicativo\n\n¬øQU√â HACE LA APP? Permite a ciudadanos reportar problemas urbanos (baches, luminarias rotas, basura, etc.) con fotos y ubicaci√≥n. Las encargados reciben, gestionan y resuelven estos reportes.\nEl sistema es simple trabaja con varios servicios como Firebase para La BDD, y monitoreo de estos, con implementeacion de OAUTH 2.0 para login facil, APIs para servicios de la aplicacion(reportes, consultas, etc) y de terceros como Maps\n\nüé® FRONTEND (Apps)\n\niOS/Android: Ciudadanos reportan incidentes con foto + GPS Web Admin: Funcionarios municipales gestionan reportes\n\nAUTENTICACI√ìN Firebase Auth: Login de usuarios OAuth 2.0: Login con Google/Facebook SMS: Verificaci√≥n por c√≥digo de tel√©fono (evita bots)\nAPI GATEWAY (Puerta de entrada) REST: Crear/editar reportes (POST /api/reportes) GraphQL: Consultas complejas (estad√≠sticas, filtros) WebSocket: Notificaciones en tiempo real\nMICROSERVICIOS (L√≥gica de negocio) Usuarios: Perfiles, historial, credibilidad Reportes: Crear incidentes, estados (pendiente‚Üíproceso‚Üíresuelto) Asignaci√≥n: Distribuye reportes autom√°ticamente por zona/tipo Notificaciones: Alerta a ciudadanos y funcionarios\nBASES DE DATOS Firestore: Guarda reportes, usuarios, comentarios (NoSQL en la nube) Cloud Storage: Almacena fotos/videos de incidentes Redis Cache: Acelera consultas frecuentes SQLite Local: Modo offline (crea reportes sin internet)\nSERVICIOS EXTERNOS Google Maps: Ubicaci√≥n exacta + mapas interactivos Firebase Cloud Messaging: Notificaciones push (‚ÄúTu reporte fue resuelto‚Äù) Twilio SMS: Confirmaciones por mensaje de texto\nANALITICA Crashlytics: Detecta errores de la app Analytics: Estad√≠sticas de uso (reportes/d√≠a, zonas cr√≠ticas) Cloud Monitoring: Rendimiento de servidores ‚Äî\n\n\nVideo Explicacion\nhttps://youtu.be/VocYuBjjObc\n\n\n\nAuthor: Paul Cadena\n\n\n\nGithub: https://github.com/paulscc"
  }
]