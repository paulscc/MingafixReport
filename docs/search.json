[
  {
    "objectID": "tercer.html",
    "href": "tercer.html",
    "title": "Reto 1: Ciudadana Basica",
    "section": "",
    "text": "MINGAFIX API v1.0 - REST + GraphQL"
  },
  {
    "objectID": "tercer.html#documentacion",
    "href": "tercer.html#documentacion",
    "title": "Reto 1: Ciudadana Basica",
    "section": "Documentacion",
    "text": "Documentacion\nApi implementeda a traves de: Backend: Render.com BBD y Storage: Firebase Consultas: Graphql\nQu√© hace esta API? Permite que ciudadanos reporten problemas en su ciudad (baches, basura, luminarias rotas, etc.) usando su celular. Los funcionarios pueden ver estos reportes y darles tratamiento.\n¬øC√≥mo usar la API? Producci√≥n: https://renderpi.onrender.com/ (En caso de inactividad la API se demorara en encenderse alrededor de 45s)\nSe puede usar Postman en este caso se usar√° Gitbash(simplemente usare los comandos y la comunicacion se realizar√°)\n\n\n\nApp\n\n\nPROBAR LA API (Paso a Paso) Paso 1: Verificar que funcione bash curl https://renderpi.onrender.com\n        Respuesta : {\"status\": \"online\", ...}\nCrear un Reporte Para qu√© sirve: Un ciudadano reporta un problema (bache, basura, etc.) Endpoint: POST /reportes Qu√© necesitas enviar:\ncategoria: Tipo de problema (bache, basura, luminaria, acera_rota) lat: Latitud (ubicaci√≥n en el mapa) lng: Longitud (ubicaci√≥n en el mapa) descripcion: Qu√© est√° pasando usuario_id: Qui√©n est√° reportando foto: Imagen del problema (opcional)\nEjemplo con foto desde tu celular: bash# Subir una foto\ncurl -X POST https://renderpi.onrender.com/reportes\n-F ‚Äúcategoria=bache‚Äù\n-F ‚Äúlat=-0.8131‚Äù\n-F ‚Äúlng=-77.7172‚Äù\n-F ‚Äúdescripcion=Bache muy grande en la avenida‚Äù\n-F ‚Äúusuario_id=juan123‚Äù\n-F ‚Äúfoto=@/ruta/a/foto.jpg‚Äù\nEjemplo usado de codigo en video: curl -X POST https://renderpi.onrender.com/reportes\n-F ‚Äúcategoria=bache‚Äù\n-F ‚Äúlat=-0.8131‚Äù\n-F ‚Äúlng=-77.7172‚Äù\n-F ‚Äúdescripcion=Prueba test endpoint‚Äù\n-F ‚Äúusuario_id=USER-ABC-001‚Äù\n-F ‚Äúfoto=@C:/Users/OneDrive/Escritorio/foto.jpg‚Äù\nL√≠mite de Reportes Regla: Solo puedes hacer 30 reportes por minuto ¬øPor qu√©? Para evitar spam y abusos\nNo Duplicados\nRegla: No puedes reportar el mismo problema 2 veces en\nGRAPHQL (Consultas Avanzadas) Para qu√© sirve: Hacer consultas m√°s complejas de forma m√°s eficiente Endpoint: POST\nSOBRE LAS FOTOS Se guardan en Firebase Storage y esta direccion luego en la base de Datos con todos los registros de reportes\n\nGithub\nhttps://github.com/paulscc/RenderPi\n\nVideo Explicacion\nhttps://youtu.be/czEOuxzFUsY \nAuthor: Cadena Paul"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Primer reporte Mingafix",
    "section": "",
    "text": "```{column width=‚Äú100%‚Äù}\n\n\n\nApp\n\n\n```\n#Link App (movil)\nhttps://app.flutterflow.io/share/mingaf-fhn2o9?page=HomePage\n##Video Explicacion\nhttps://www.youtube.com/watch?v=zngtVqOHEoU\nAuthor: Cadena Paul"
  },
  {
    "objectID": "cuarto.html",
    "href": "cuarto.html",
    "title": "Reto 2 ‚Äì Mapa Vivo Inicial",
    "section": "",
    "text": "App\n\n\n\nMapa interactivo\nSimple conexion con API (GET reportes) y muestra puntos en mapa\n\n\n\nApp\n\n\n\n\nCode\nimport requests\nimport folium\nfrom folium.plugins import MarkerCluster\nimport os\n\n# -------------------------------\n# 1. Obtener datos desde la API\n# -------------------------------\nurl = \"https://renderpi.onrender.com/reportes\"\nresponse = requests.get(url)\ndata = response.json()\n\n# -------------------------------\n# 2. Reportes y categor√≠as\n# -------------------------------\nreportes = data.get('data', [])\nprimeros_10 = reportes[:10]\ntodas_las_categorias = sorted(set(r.get(\"categoria\", \"otro\") for r in reportes))\n\n# -------------------------------\n# 3. Crear el mapa centrado\n# -------------------------------\nif primeros_10:\n    lat_centro = primeros_10[0]['ubicacion']['lat']\n    lng_centro = primeros_10[0]['ubicacion']['lng']\nelse:\n    lat_centro, lng_centro = 0, 0\n\nm = folium.Map(location=[lat_centro, lng_centro], zoom_start=14)\n\n# -------------------------------\n# 4. Colores por categor√≠a\n# -------------------------------\ncolores = {\n    \"bache\": \"red\",\n    \"basura\": \"purple\",\n    \"fuga\": \"white\",\n    \"hueco\": \"orange\",\n    \"semaforo\": \"pink\",\n    \"alumbrado\": \"black\",\n    \"accidente\": \"blue\",\n    \"incendio\": \"orange\",\n    \"derrumbe\": \"green\",\n    \"otro\": \"gray\"\n}\n\n# -------------------------------\n# 5. Crear grupo para cada categor√≠a\n# -------------------------------\ncategoria_grupos = {}\nfor categoria in todas_las_categorias:\n    categoria_grupos[categoria] = folium.FeatureGroup(name=categoria, show=False)\n    m.add_child(categoria_grupos[categoria])\n\n# Grupo de los primeros 10 visibles inicialmente\ngrupo_inicial = folium.FeatureGroup(name=\"Inicial\", show=True)\nm.add_child(grupo_inicial)\n\n# -------------------------------\n# 6. A√±adir marcadores\n# -------------------------------\nfor i, reporte in enumerate(reportes):\n    categoria = reporte.get(\"categoria\", \"otro\")\n    color = colores.get(categoria, \"gray\")\n    lat = reporte[\"ubicacion\"][\"lat\"]\n    lng = reporte[\"ubicacion\"][\"lng\"]\n    descripcion = reporte.get(\"descripcion\", \"\")\n    imagen_url = reporte.get(\"fotoUrl\", \"\")\n    \n    popup_html = f\"\"\"\n    &lt;strong&gt;Categor√≠a:&lt;/strong&gt; {categoria}&lt;br&gt;\n    &lt;strong&gt;Descripci√≥n:&lt;/strong&gt; {descripcion}&lt;br&gt;\n    &lt;img src=\"{imagen_url}\" width=\"200px\"&gt;\n    \"\"\"\n    \n    marker = folium.Marker(\n        location=[lat, lng],\n        popup=popup_html,\n        icon=folium.Icon(color=color)\n    )\n    \n    if i &lt; 10:\n        marker.add_to(grupo_inicial)\n    marker.add_to(categoria_grupos[categoria])\n\n# -------------------------------\n# 7. Agregar controles y guardar\n# -------------------------------\nfolium.LayerControl(collapsed=False).add_to(m)\n\n# JavaScript para la selecci√≥n de categor√≠a\ncategoria_dropdown = f\"\"\"\n&lt;script&gt;\nfunction mostrarCategoria() {{\n    var seleccion = document.getElementById('categoria-select').value;\n    var capas = document.getElementsByClassName('leaflet-control-layers-selector');\n    for (var i = 0; i &lt; capas.length; i++) {{\n        var label = capas[i].nextSibling.innerText.trim();\n        capas[i].checked = (label === seleccion);\n        capas[i].click();\n    }}\n}}\n&lt;/script&gt;\n\n&lt;div style=\"position: fixed; top: 10px; left: 50px; z-index: 1000; background: white; padding: 10px;\"&gt;\n    &lt;label for=\"categoria-select\"&gt;&lt;strong&gt;Filtrar por categor√≠a:&lt;/strong&gt;&lt;/label&gt;\n    &lt;select id=\"categoria-select\" onchange=\"mostrarCategoria()\"&gt;\n        &lt;option disabled selected&gt;-- Seleccione una categor√≠a --&lt;/option&gt;\n        {''.join([f'&lt;option value=\"{c}\"&gt;{c.capitalize()}&lt;/option&gt;' for c in todas_las_categorias])}\n    &lt;/select&gt;\n&lt;/div&gt;\n\"\"\"\n\n# Agregar el script manualmente al HTML del mapa\nmap_file = \"mapas/mapa.html\"\nos.makedirs(\"mapas\", exist_ok=True)\n\nm.get_root().html.add_child(folium.Element(categoria_dropdown))\nm.save(map_file)"
  },
  {
    "objectID": "segundo.html#documento-explicativo",
    "href": "segundo.html#documento-explicativo",
    "title": "Reto 0 Mingafix",
    "section": "Documento explicativo",
    "text": "Documento explicativo\n\n¬øQU√â HACE LA APP? Permite a ciudadanos reportar problemas urbanos (baches, luminarias rotas, basura, etc.) con fotos y ubicaci√≥n. Las encargados reciben, gestionan y resuelven estos reportes.\nEl sistema es simple trabaja con varios servicios como Firebase para La BDD, y monitoreo de estos, con implementeacion de OAUTH 2.0 para login facil, APIs para servicios de la aplicacion(reportes, consultas, etc) y de terceros como Maps\n\nüé® FRONTEND (Apps)\n\niOS/Android: Ciudadanos reportan incidentes con foto + GPS Web Admin: Funcionarios municipales gestionan reportes\n\nAUTENTICACI√ìN Firebase Auth: Login de usuarios OAuth 2.0: Login con Google/Facebook SMS: Verificaci√≥n por c√≥digo de tel√©fono (evita bots)\nAPI GATEWAY (Puerta de entrada) REST: Crear/editar reportes (POST /api/reportes) GraphQL: Consultas complejas (estad√≠sticas, filtros) WebSocket: Notificaciones en tiempo real\nMICROSERVICIOS (L√≥gica de negocio) Usuarios: Perfiles, historial, credibilidad Reportes: Crear incidentes, estados (pendiente‚Üíproceso‚Üíresuelto) Asignaci√≥n: Distribuye reportes autom√°ticamente por zona/tipo Notificaciones: Alerta a ciudadanos y funcionarios\nBASES DE DATOS Firestore: Guarda reportes, usuarios, comentarios (NoSQL en la nube) Cloud Storage: Almacena fotos/videos de incidentes Redis Cache: Acelera consultas frecuentes SQLite Local: Modo offline (crea reportes sin internet)\nSERVICIOS EXTERNOS Google Maps: Ubicaci√≥n exacta + mapas interactivos Firebase Cloud Messaging: Notificaciones push (‚ÄúTu reporte fue resuelto‚Äù) Twilio SMS: Confirmaciones por mensaje de texto\nANALITICA Crashlytics: Detecta errores de la app Analytics: Estad√≠sticas de uso (reportes/d√≠a, zonas cr√≠ticas) Cloud Monitoring: Rendimiento de servidores ‚Äî\n\n\nVideo Explicacion\nhttps://youtu.be/VocYuBjjObc\n\n\n\nAuthor: Paul Cadena\n\n\n\nGithub: https://github.com/paulscc"
  }
]