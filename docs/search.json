[
  {
    "objectID": "tercer.html",
    "href": "tercer.html",
    "title": "Reto 1: Ciudadana Basica",
    "section": "",
    "text": "MINGAFIX API v1.0 - REST + GraphQL"
  },
  {
    "objectID": "tercer.html#documentacion",
    "href": "tercer.html#documentacion",
    "title": "Reto 1: Ciudadana Basica",
    "section": "Documentacion",
    "text": "Documentacion\nApi implementeda a traves de: Backend: Render.com BBD y Storage: Firebase Consultas: Graphql\nQué hace esta API? Permite que ciudadanos reporten problemas en su ciudad (baches, basura, luminarias rotas, etc.) usando su celular. Los funcionarios pueden ver estos reportes y darles tratamiento.\n¿Cómo usar la API? Producción: https://renderpi.onrender.com/ (En caso de inactividad la API se demorara en encenderse alrededor de 45s)\nSe puede usar Postman en este caso se usará Gitbash(simplemente usare los comandos y la comunicacion se realizará)\n\n\n\nApp\n\n\nPROBAR LA API (Paso a Paso) Paso 1: Verificar que funcione bash curl https://renderpi.onrender.com\n        Respuesta : {\"status\": \"online\", ...}\nCrear un Reporte Para qué sirve: Un ciudadano reporta un problema (bache, basura, etc.) Endpoint: POST /reportes Qué necesitas enviar:\ncategoria: Tipo de problema (bache, basura, luminaria, acera_rota) lat: Latitud (ubicación en el mapa) lng: Longitud (ubicación en el mapa) descripcion: Qué está pasando usuario_id: Quién está reportando foto: Imagen del problema (opcional)\nEjemplo con foto desde tu celular: bash# Subir una foto\ncurl -X POST https://renderpi.onrender.com/reportes\n-F “categoria=bache”\n-F “lat=-0.8131”\n-F “lng=-77.7172”\n-F “descripcion=Bache muy grande en la avenida”\n-F “usuario_id=juan123”\n-F “foto=@/ruta/a/foto.jpg”\nEjemplo usado de codigo en video: curl -X POST https://renderpi.onrender.com/reportes\n-F “categoria=bache”\n-F “lat=-0.8131”\n-F “lng=-77.7172”\n-F “descripcion=Prueba test endpoint”\n-F “usuario_id=USER-ABC-001”\n-F “foto=@C:/Users/OneDrive/Escritorio/foto.jpg”\nLímite de Reportes Regla: Solo puedes hacer 30 reportes por minuto ¿Por qué? Para evitar spam y abusos\nNo Duplicados\nRegla: No puedes reportar el mismo problema 2 veces en\nGRAPHQL (Consultas Avanzadas) Para qué sirve: Hacer consultas más complejas de forma más eficiente Endpoint: POST\nSOBRE LAS FOTOS Se guardan en Firebase Storage y esta direccion luego en la base de Datos con todos los registros de reportes\n\nGithub\nhttps://github.com/paulscc/RenderPi\n\nVideo Explicacion\nhttps://youtu.be/czEOuxzFUsY \nAuthor: Cadena Paul"
  },
  {
    "objectID": "quinto.html",
    "href": "quinto.html",
    "title": "Reto 3 Creativo-Comunitario “Yo soy Minguero”",
    "section": "",
    "text": "App\nVideo Compartido por el canal de watsapp"
  },
  {
    "objectID": "quinto.html#video-explicativo",
    "href": "quinto.html#video-explicativo",
    "title": "Reto 3 Creativo-Comunitario “Yo soy Minguero”",
    "section": "Video Explicativo",
    "text": "Video Explicativo\nhttps://youtu.be/7qWxTZJ96LM\n\nAuthor\nPaul Cadena"
  },
  {
    "objectID": "cuarto.html",
    "href": "cuarto.html",
    "title": "Reto 2 – Mapa Vivo Inicial",
    "section": "",
    "text": "App"
  },
  {
    "objectID": "cuarto.html#video-explicativo",
    "href": "cuarto.html#video-explicativo",
    "title": "Reto 2 – Mapa Vivo Inicial",
    "section": "Video Explicativo",
    "text": "Video Explicativo\nhttps://youtu.be/e2oQPsmCcAs\n\nAuthor\nPaul Cadena"
  },
  {
    "objectID": "3primer.html",
    "href": "3primer.html",
    "title": "Reto 1 – Smart Report Submission Flow",
    "section": "",
    "text": "App"
  },
  {
    "objectID": "3primer.html#video-expliacacion",
    "href": "3primer.html#video-expliacacion",
    "title": "Reto 1 – Smart Report Submission Flow",
    "section": "Video Expliacacion",
    "text": "Video Expliacacion\nhttps://youtu.be/6cWt80tMquo\n\nAuthor\nPaul Cadena\nGithub: https://github.com/paulscc"
  },
  {
    "objectID": "2segundo.html",
    "href": "2segundo.html",
    "title": "Reto 2 – LiveMap API Integration",
    "section": "",
    "text": "App"
  },
  {
    "objectID": "2segundo.html#mapa-de-reportes-desde-api",
    "href": "2segundo.html#mapa-de-reportes-desde-api",
    "title": "Reto 2 – LiveMap API Integration",
    "section": "Mapa de reportes desde API",
    "text": "Mapa de reportes desde API\n\nMapa\n\n\nCode\nimport requests\nimport folium\nfrom folium.plugins import Fullscreen, LocateControl, MousePosition\n\n# 1. Obtener datos\nurl = \"https://javaspringap.onrender.com/api/reportes\"\nresponse = requests.get(url)\ndata = response.json()[\"data\"]\n\n# 2. Definir colores por categoría\ncategoria_colores = {\n    \"bache\": \"red\",\n    \"basura\": \"green\",\n    \"luminaria\": \"orange\",\n    \"acera_rota\": \"blue\",\n    \"semaforo\": \"purple\",\n    \"alcantarilla\": \"cadetblue\",\n    \"arbol_caido\": \"darkgreen\",\n    \"cable_suelto\": \"darkpurple\",\n    \"grafiti\": \"pink\",\n    \"otro\": \"gray\"\n}\n\n# 3. Crear mapa\nm = folium.Map(location=[-0.20016, -78.49418], zoom_start=15, control_scale=True)\n\n# 4. Capas por categoría\ncapas = {}\n\nfor reporte in data:\n    cat = reporte.get(\"categoria\", \"otro\").lower()\n    capa = capas.setdefault(cat, folium.FeatureGroup(name=cat.capitalize(), show=True))\n\n    lat = reporte.get(\"lat\")\n    lng = reporte.get(\"lng\")\n    descripcion = reporte.get(\"descripcion\", \"Sin descripción\")\n    estado = reporte.get(\"estado\", \"desconocido\")\n    foto = reporte.get(\"fotoUrl\")\n\n    popup_html = f\"\"\"\n    &lt;b&gt;Categoría:&lt;/b&gt; {cat}&lt;br&gt;\n    &lt;b&gt;Estado:&lt;/b&gt; {estado}&lt;br&gt;\n    &lt;b&gt;Descripción:&lt;/b&gt; {descripcion}&lt;br&gt;\n    \"\"\"\n    if foto:\n        popup_html += f\"&lt;img src='{foto}' width='180'&gt;\"\n\n    marker = folium.Marker(\n        location=[lat, lng],\n        popup=folium.Popup(popup_html, max_width=250),\n        icon=folium.Icon(color=categoria_colores.get(cat, \"gray\"), icon=\"info-sign\")\n    )\n\n    marker.add_to(capa)\n\n# 5. Agregar capas al mapa\nfor capa in capas.values():\n    capa.add_to(m)\n\n# 6. Agregar control de capas\nfolium.LayerControl(collapsed=False).add_to(m)\n\n# 7. Agregar plugins adicionales\nFullscreen().add_to(m)\nLocateControl(auto_start=False).add_to(m)\nMousePosition().add_to(m)\n\n# 8. Mostrar mapa\nm\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nSupabase Conexion con Api en Java Spring Boot +GraphSql en Render\n\nApi\nhttps://javaspringap.onrender.com/api\n\n\n\nArquitectura\nLa api se desarrollo en JAVA Spring Boot, con java v17, y se subio a render como un archivo docker\n\nComandos para API- Git Bash\nSe uso Git Bash para las peticiones con la API\nCodigo generar reportes curl -X GET https://javaspringap.onrender.com/api Respuesta Esperada: Una Json con los reportes\nCodigo insertar reporte $ curl -X POST https://javaspringap.onrender.com/api/reportes -F “categoria=bache” -F “lat=-0.8131” -F “lng=-77.7172” -F “descripcion=Blabla” -F “usuarioId=USER-001” -F “foto=@C:/Users/pcstu/OneDrive/Escritorio/foto.jpg”\nRespuesta Esperada: \n       {\"estado\":\"pendiente\",\"foto_url\":\"https://qfujnnksyobhowmxpiaf.supabase.co/storage/v1/object/public/reportes-fotos/51cd906a-3774-459e-a853-151b8e0eaeb0.jpg\",\"success\":true,\"id\":\"287b8dce-a992-423f-99ce-683d4bdd1cfa\",\"message\":\"Reporte creado exitosamente\"}"
  },
  {
    "objectID": "2segundo.html#video-explicativo",
    "href": "2segundo.html#video-explicativo",
    "title": "Reto 2 – LiveMap API Integration",
    "section": "Video Explicativo",
    "text": "Video Explicativo\nhttps://youtu.be/SdZLBzGYdPQ\n\nAuthor\nPaul Cadena\nGithub: https://github.com/paulscc"
  },
  {
    "objectID": "2extras.html",
    "href": "2extras.html",
    "title": "Bonus Avanzado (opcional)",
    "section": "",
    "text": "Integrar IA para clasificación automática de imágenes o textos (por ejemplo, categorizar tipo de incidencia a partir de una foto o descripción).\n## Entrega: -1. Modelo de imagenes-texto para tener una descripcion a partir de una simple imagen -2. Modelo de Clasificacion a partir de la descripcion del reporte\n    1. Este modelo hace uso de un modelo Open SOurce y de libre acceso\n    que nos dara una descripcion con solo una imagen de imput, es decir nos explicara la imagen, si subimos una imagen del cielo este modelo de IA sabra explicarnoslo\n\n    2. Se entreno un modelo de IA, se hizo Fine-tuning a otro modelo (bert-base). Basicamente se tomo un modelo de lenguaje de clasificacion y se lo entreno con muchos ejemplos de descripciones para asi que este modelo aprenda a categorizar un modelo a partir de su descripcion es decir: dada una descripcion del reporte, este modelo sabra en cual categoria ponerla(bache, luminaria, grafitti, etc)\nTodo se realizo en google collab importante los modelos de codigo libre y entrenandolos en google collab, cualquiera comparto los enlaces a estos modelos para que los prueben\n        Imagen: https://colab.research.google.com/drive/15yMGgjKFOXGO2PBdZPeKXVwQ9fe-tB5F?usp=sharing\n\n        Clasificador :https://colab.research.google.com/drive/1vOrGJq04CjlZUK-WijqJkRLOk9t2v8Yp?usp=sharing\n\n\nhttps://youtu.be/TMTnp84gqsU\n\n\nPaul Cadena\nGithub: https://github.com/paulscc"
  },
  {
    "objectID": "2extras.html#video-expliacacion",
    "href": "2extras.html#video-expliacacion",
    "title": "Bonus Avanzado (opcional)",
    "section": "",
    "text": "https://youtu.be/TMTnp84gqsU\n\n\nPaul Cadena\nGithub: https://github.com/paulscc"
  },
  {
    "objectID": "1primer.html",
    "href": "1primer.html",
    "title": "Reto 1 Supabase Connection & Data Handling”",
    "section": "",
    "text": "App\nSupabase Conexion con Api y envio de reportes y muestra de reportes\nhttps://renderpisu.onrender.com API\nCodigo generar reportes curl -X GET https://renderpisu.onrender.com/reportes\nCodigo insertar reporte curl -X POST https://renderpisu.onrender.com/reportes -F “categoria=luminaria” -F “lat=-0.8131” -F “lng=-77.7172” -F “descripcion=Prueba test endpoint” -F “usuario_id=FUNC-001” -F “foto=@C:/Users/pcstu/OneDrive/Escritorio/foto.jpg”"
  },
  {
    "objectID": "1primer.html#video-explicativo",
    "href": "1primer.html#video-explicativo",
    "title": "Reto 1 Supabase Connection & Data Handling”",
    "section": "Video Explicativo",
    "text": "Video Explicativo\nhttps://youtu.be/3nYP_T7PJYc\n\nAuthor\nPaul Cadena"
  },
  {
    "objectID": "2cuarto.html",
    "href": "2cuarto.html",
    "title": "Reto Creativo – Visualización Inteligente de Datos Urbano",
    "section": "",
    "text": "Link Dashboard: https://public.tableau.com/app/profile/paul.cadena/viz/LibroMinga/Dashboard1?publish=yes\n\n\n\nApp\n\n\nPara reportes pas profesionales se uso Tableau, un software para analitica de datos, en esta caso enfocado en los reportes donde podemos ver Categorias, Descripciones, Mapa, etc. Es muy adaptable y se lo puede mejorar poder diferentes tipos de datos excelente para un analisis de reportes mas profesional\n\n\nhttps://youtu.be/wYobrL0fP6k\n\n\nPaul Cadena\nGithub: https://github.com/paulscc"
  },
  {
    "objectID": "2cuarto.html#video-expliacacion",
    "href": "2cuarto.html#video-expliacacion",
    "title": "Reto Creativo – Visualización Inteligente de Datos Urbano",
    "section": "",
    "text": "https://youtu.be/wYobrL0fP6k\n\n\nPaul Cadena\nGithub: https://github.com/paulscc"
  },
  {
    "objectID": "2primer.html",
    "href": "2primer.html",
    "title": "Reto 1 Supabase Connection & Data Handling”",
    "section": "",
    "text": "App\nSupabase Conexion con Api y envio de reportes y muestra de reportes\nhttps://renderpisu.onrender.com API\nCodigo generar reportes curl -X GET https://renderpisu.onrender.com/reportes\nCodigo insertar reporte curl -X POST https://renderpisu.onrender.com/reportes -F “categoria=luminaria” -F “lat=-0.8131” -F “lng=-77.7172” -F “descripcion=Prueba test endpoint” -F “usuario_id=FUNC-001” -F “foto=@C:/Users/pcstu/OneDrive/Escritorio/foto.jpg”"
  },
  {
    "objectID": "2primer.html#video-explicativo",
    "href": "2primer.html#video-explicativo",
    "title": "Reto 1 Supabase Connection & Data Handling”",
    "section": "Video Explicativo",
    "text": "Video Explicativo\nhttps://youtu.be/3nYP_T7PJYc\n\nAuthor\nPaul Cadena"
  },
  {
    "objectID": "2tercero.html",
    "href": "2tercero.html",
    "title": "Reto 3 Live Updates Simulation (Polling)",
    "section": "",
    "text": "App"
  },
  {
    "objectID": "2tercero.html#reto-3-live-updates-simulation-polling",
    "href": "2tercero.html#reto-3-live-updates-simulation-polling",
    "title": "Reto 3 Live Updates Simulation (Polling)",
    "section": "Reto 3 Live Updates Simulation (Polling)",
    "text": "Reto 3 Live Updates Simulation (Polling)\nWeb: https://mingmapapp-jepqodfkdttgydyoesjwr7.streamlit.app/\n\nTecnologias Python, Streamlit+Api Java (para reportes)\n\nSe uso un servicio de Polling integrado con python donde por medio de Streamlit se desplego la aplicacion y se logro\nuna actualizacion del mapa automatica:\n    Ejemplo de uso de funcion:\n    \n    \n        def obtener_datos():\n            try:\n                url = \"https://javaspringap.onrender.com/api/reportes\"\n                response = requests.get(url, timeout=20)\n                    response.raise_for_status()\n                return response.json()[\"data\"]\n            except Exception as e:\n                st.error(f\"Error al obtener datos: {e}\")\n                return []\n\nEste script se ejecuta cada 20segundos lo que hace que el mapa  se auto-recargue con los nuevos reportes que viene desde la API en JAVA desplegada en Render\n\n\nIngresar a la API: Para usar la api usar estos comandos:\n\n\n        Codigo generar reportes\n        \n        curl -X GET https://renderpisu.onrender.com/reportes\n\n        Codigo insertar reporte \n        \n        curl -X POST https://renderpisu.onrender.com/reportes      -F \"categoria=luminaria\"      -F \"lat=-0.8131\"      -F \"lng=-77.7172\"      -F \"descripcion=Prueba test endpoint\"      -F \"usuario_id=FUNC-001\"      -F \"foto=@C:/Users/pcstu/OneDrive/Escritorio/foto.jpg\"\n\n\n    StreamLit, es una aplicacion que permite desplegar directamente desde un repositorio en github, solo hace falta importar\n    librerias e instalarlo en el entorno y empezar a programar. Streamlit funciona perfecto para este reto de despliegue de de mapa +  polling para auto actualizacion donde el backend funciona. Streamlit en su plan Free tiene opcion de despligue a difererncia del plan de pago, este permite el despliegue de aplicaciones por 30minutos siempre que se deje de usar el servicio.  \nCodigo Fuente: https://github.com/paulscc/MingMapStreamLit"
  },
  {
    "objectID": "2tercero.html#video-explicativo",
    "href": "2tercero.html#video-explicativo",
    "title": "Reto 3 Live Updates Simulation (Polling)",
    "section": "Video Explicativo",
    "text": "Video Explicativo\nhttps://youtu.be/PurB-jq5pxw\n\nAuthor\nPaul Cadena\nGithub: https://github.com/paulscc"
  },
  {
    "objectID": "3segundo.html",
    "href": "3segundo.html",
    "title": "Reto 2 – LiveMap Intelligence Layer",
    "section": "",
    "text": "App"
  },
  {
    "objectID": "3segundo.html#video-expliacacion",
    "href": "3segundo.html#video-expliacacion",
    "title": "Reto 2 – LiveMap Intelligence Layer",
    "section": "Video Expliacacion",
    "text": "Video Expliacacion\nhttps://youtu.be/uV3rH2HJs0Q\n\nAuthor\nPaul Cadena\nGithub: https://github.com/paulscc"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Primer reporte Mingafix",
    "section": "",
    "text": "```{column width=“100%”}\n\n\n\nApp\n\n\n```\n#Link App (movil)\nhttps://app.flutterflow.io/share/mingaf-fhn2o9?page=HomePage\n##Video Explicacion\nhttps://www.youtube.com/watch?v=zngtVqOHEoU\nAuthor: Cadena Paul"
  },
  {
    "objectID": "segundo.html#documento-explicativo",
    "href": "segundo.html#documento-explicativo",
    "title": "Reto 0 Mingafix",
    "section": "Documento explicativo",
    "text": "Documento explicativo\n\n¿QUÉ HACE LA APP? Permite a ciudadanos reportar problemas urbanos (baches, luminarias rotas, basura, etc.) con fotos y ubicación. Las encargados reciben, gestionan y resuelven estos reportes.\nEl sistema es simple trabaja con varios servicios como Firebase para La BDD, y monitoreo de estos, con implementeacion de OAUTH 2.0 para login facil, APIs para servicios de la aplicacion(reportes, consultas, etc) y de terceros como Maps\n\n🎨 FRONTEND (Apps)\n\niOS/Android: Ciudadanos reportan incidentes con foto + GPS Web Admin: Funcionarios municipales gestionan reportes\n\nAUTENTICACIÓN Firebase Auth: Login de usuarios OAuth 2.0: Login con Google/Facebook SMS: Verificación por código de teléfono (evita bots)\nAPI GATEWAY (Puerta de entrada) REST: Crear/editar reportes (POST /api/reportes) GraphQL: Consultas complejas (estadísticas, filtros) WebSocket: Notificaciones en tiempo real\nMICROSERVICIOS (Lógica de negocio) Usuarios: Perfiles, historial, credibilidad Reportes: Crear incidentes, estados (pendiente→proceso→resuelto) Asignación: Distribuye reportes automáticamente por zona/tipo Notificaciones: Alerta a ciudadanos y funcionarios\nBASES DE DATOS Firestore: Guarda reportes, usuarios, comentarios (NoSQL en la nube) Cloud Storage: Almacena fotos/videos de incidentes Redis Cache: Acelera consultas frecuentes SQLite Local: Modo offline (crea reportes sin internet)\nSERVICIOS EXTERNOS Google Maps: Ubicación exacta + mapas interactivos Firebase Cloud Messaging: Notificaciones push (“Tu reporte fue resuelto”) Twilio SMS: Confirmaciones por mensaje de texto\nANALITICA Crashlytics: Detecta errores de la app Analytics: Estadísticas de uso (reportes/día, zonas críticas) Cloud Monitoring: Rendimiento de servidores —\n\n\nVideo Explicacion\nhttps://youtu.be/VocYuBjjObc\n\n\n\nAuthor: Paul Cadena\n\n\n\nGithub: https://github.com/paulscc"
  }
]