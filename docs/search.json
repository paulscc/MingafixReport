[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Primer reporte Mingafix",
    "section": "",
    "text": "```{column width=‚Äú100%‚Äù}\n\n\n\nApp\n\n\n```\n#Link App (movil)\nhttps://app.flutterflow.io/share/mingaf-fhn2o9?page=HomePage\n##Video Explicacion\nhttps://www.youtube.com/watch?v=zngtVqOHEoU\nAuthor: Cadena Paul"
  },
  {
    "objectID": "segundo.html",
    "href": "segundo.html",
    "title": "Reto 0 Mingafix",
    "section": "",
    "text": "# Diagrama de Arquitectura MINGAFIX\ngraph TB\n    subgraph Frontend[\"INTERFAZ DE USUARIO\"]\n        A1[\"Flutter App iOS\"]\n        A2[\"Flutter App Android\"]\n        A3[\"Flutter Web Admin\"]\n  end\n subgraph Auth[\"AUTENTICACI√ìN\"]\n        B1[\"Firebase Authentication\"]\n        B2[\"OAuth 2.0\"]\n        B3[\"Phone Verification\"]\n  end\n subgraph Gateway[\"API GATEWAY\"]\n        C1[\"API REST\"]\n        C2[\"GraphQL\"]\n        C3[\"WebSocket\"]\n  end\n subgraph Microservices[\"MICROSERVICIOS\"]\n        D1[\"Servicio Usuarios\"]\n        D2[\"Servicio Mingas\"]\n        D3[\"Servicio Matching\"]\n        D4[\"Servicio Notificaciones\"]\n  end\n subgraph Database[\"BASES DE DATOS\"]\n        E1[(\"Firestore\")]\n        E2[(\"Cloud Storage\")]\n        E3[(\"Redis Cache\")]\n        E4[(\"SQLite Local\")]\n  end\n subgraph External[\"SERVICIOS EXTERNOS\"]\n        F1[\"Google Maps API\"]\n        F2[\"Firebase Cloud Messaging\"]\n        F3[\"Twilio SMS\"]\n  end\n subgraph Monitoring[\"ANALITICA\"]\n        G1[\"Firebase Crashlytics\"]\n        G2[\"Firebase Analytics\"]\n        G3[\"Cloud Monitoring\"]\n  end\n    A1 --&gt; B1 & C1 & E4\n    A2 --&gt; B1 & C1 & E4\n    A3 --&gt; B1 & C1\n    B1 --&gt; C1\n    B2 --&gt; B1\n    B3 --&gt; B1\n    C1 --&gt; D1 & D2 & D3 & D4\n    C2 --&gt; D1 & D2\n    C3 --&gt; D4\n    D1 --&gt; E1 & E2\n    D2 --&gt; E1 & E2 & F1\n    D3 --&gt; E1 & E3\n    D4 --&gt; F2 & F3\n    A1 -.-&gt; G1 & G2\n    A2 -.-&gt; G1 & G2\n    A3 -.-&gt; G2\n    D1 -.-&gt; G3\n    D2 -.-&gt; G3\n    D3 -.-&gt; G3\n    D4 -.-&gt; G3\n\n     A1:::frontend\n     A2:::frontend\n     A3:::frontend\n     B1:::auth\n     B2:::auth\n     B3:::auth\n     C1:::gateway\n     C2:::gateway\n     C3:::gateway\n     D1:::service\n     D2:::service\n     D3:::service\n     D4:::service\n     E1:::database\n     E2:::database\n     E3:::database\n     E4:::database\n     F1:::external\n     F2:::external\n     F3:::external\n     G1:::monitor\n     G2:::monitor\n     G3:::monitor\n    classDef frontend fill:#3b82f6,stroke:#1e40af,color:#fff\n    classDef auth fill:#10b981,stroke:#059669,color:#fff\n    classDef gateway fill:#8b5cf6,stroke:#6d28d9,color:#fff\n    classDef service fill:#f59e0b,stroke:#d97706,color:#fff\n    classDef database fill:#ef4444,stroke:#dc2626,color:#fff\n    classDef external fill:#06b6d4,stroke:#0891b2,color:#fff\n    classDef monitor fill:#ec4899,stroke:#db2777,color:#fff\n#Link Arquitectura https://www.mermaidchart.com/play#pako:eNp9VN1u0zAUfhWrkxBIMLV21r8LpDRJo0rrD022gSgXTuK0FiGekpSBEC-AEEKMq90g7hAPwQ1vwhPwCNiJ08ZJSydFO9_5vuPP59h-1_JZQFrDVhixG3-Dkwy4o1UM0q23TvD1BowTFmckDp6vWn-ffoBDH2hA9MCi6XlWDNXNya_b2er1guukT-9w7njaJtlJAH69TWgc0clwBpBj4OE0UAloQrpinhAD17RWFK4n6pHfZttcn9fPwP9wuW2JsYBY6PcGE2Ih1OSi0icUR9nlMUqURicCwKAp201JWwtNiwm4JIkNFTlNV82zsgNfptbu_sJ9MUE2LprXenPlJqG8CWSvKWumhFGbFHrybmaEDZ4VxzmvyTZ4dWn1E9YSpLX1Ccpp-5-w6mE2M5d6zl5cSY1KZiChdOTqcMXKRbnFCWqhRYpUxpvMY1AlIIOPM3nKRStCplxrK8h_z_mKSH92HiDIuJ5W388guMdMdyxBE0dbe2B6vz_H4x4jRjCVm1HlSTUCSNiG0D4PA0XtcJSBCWJKApMLC_qac1kXaenNOMgHPm46jM1wxbb_iZjXGUG_74Gez6DaynrrWc1UyPReNtxtYR4S27TsU5UQmwem6LDUxJmuJ1vblj0X_3hka8tc7UOXIuWEz59rk2N3j7AUzns4k7X1pzpZitXBcjwekmesvvizpyWzGn820f4Ahb0vduccVc_myAR48e80sK7vEbwT-WJhPwWAJVEwU2KqrswlIrQ6SERkE2RQETig8SH1negNWsxIoCJcUsCli5K0kxYRXjn7FczUSVBJKYlmPjnIf2jTjloC2INtw3oQkiCcK9nTxGeytKjGqxto_ltPTOcDgM5ZtfYvAAhprYSGgxfzXLGNZipMaG4K-LN7KEYBNCDcgUQvmylRBsQqgJaQ3IErUC-cSUGDyAoQOY1sTGoh6RL0CJwQMYamK20L4qbkgJwSaE6pAf4TQ1SQjKgYCQRtHwBHl9GHYfplnCXpLhSYdobRw-9FnEkuFJGIY1tRiNVHba3qDf2SnbZ4Nud3BcKccjxX3vzK8s2w1gP_iPWM5DisOzAWl7O3Ew6PXa3ePisvtSTUKN__ZqH3bhf9Rl_6W63fW6wV7d7g86HjyuljMol_a1_mCwX9qDvV5PEYu_1vt_i5HBCg"
  },
  {
    "objectID": "segundo.html#documento-explicativo",
    "href": "segundo.html#documento-explicativo",
    "title": "Reto 0 Mingafix",
    "section": "Documento explicativo",
    "text": "Documento explicativo\n\n¬øQU√â HACE LA APP? Permite a ciudadanos reportar problemas urbanos (baches, luminarias rotas, basura, etc.) con fotos y ubicaci√≥n. Las encargados reciben, gestionan y resuelven estos reportes.\nEl sistema es simple trabaja con varios servicios como Firebase para La BDD, y monitoreo de estos, con implementeacion de OAUTH 2.0 para login facil, APIs para servicios de la aplicacion(reportes, consultas, etc) y de terceros como Maps\n\nüé® FRONTEND (Apps)\n\niOS/Android: Ciudadanos reportan incidentes con foto + GPS Web Admin: Funcionarios municipales gestionan reportes\n\nAUTENTICACI√ìN Firebase Auth: Login de usuarios OAuth 2.0: Login con Google/Facebook SMS: Verificaci√≥n por c√≥digo de tel√©fono (evita bots)\nAPI GATEWAY (Puerta de entrada) REST: Crear/editar reportes (POST /api/reportes) GraphQL: Consultas complejas (estad√≠sticas, filtros) WebSocket: Notificaciones en tiempo real\nMICROSERVICIOS (L√≥gica de negocio) Usuarios: Perfiles, historial, credibilidad Reportes: Crear incidentes, estados (pendiente‚Üíproceso‚Üíresuelto) Asignaci√≥n: Distribuye reportes autom√°ticamente por zona/tipo Notificaciones: Alerta a ciudadanos y funcionarios\nBASES DE DATOS Firestore: Guarda reportes, usuarios, comentarios (NoSQL en la nube) Cloud Storage: Almacena fotos/videos de incidentes Redis Cache: Acelera consultas frecuentes SQLite Local: Modo offline (crea reportes sin internet)\nSERVICIOS EXTERNOS Google Maps: Ubicaci√≥n exacta + mapas interactivos Firebase Cloud Messaging: Notificaciones push (‚ÄúTu reporte fue resuelto‚Äù) Twilio SMS: Confirmaciones por mensaje de texto\nANALITICA Crashlytics: Detecta errores de la app Analytics: Estad√≠sticas de uso (reportes/d√≠a, zonas cr√≠ticas) Cloud Monitoring: Rendimiento de servidores ‚Äî\n\n\nVideo Explicacion\nhttps://youtu.be/VocYuBjjObc\n\n\n\nAuthor: Paul Cadena\n\n\n\nGithub: https://github.com/paulscc"
  },
  {
    "objectID": "tercer.html",
    "href": "tercer.html",
    "title": "Reto 1: Ciudadana Basica",
    "section": "",
    "text": "MINGAFIX API v1.0 - REST + GraphQL"
  },
  {
    "objectID": "tercer.html#documentacion",
    "href": "tercer.html#documentacion",
    "title": "Reto 1: Ciudadana Basica",
    "section": "Documentacion",
    "text": "Documentacion\nApi implementeda a traves de: Backend: Render.com BBD y Storage: Firebase Consultas: Graphql\nQu√© hace esta API? Permite que ciudadanos reporten problemas en su ciudad (baches, basura, luminarias rotas, etc.) usando su celular. Los funcionarios pueden ver estos reportes y darles tratamiento.\n¬øC√≥mo usar la API? Producci√≥n: https://renderpi.onrender.com/ (En caso de inactividad la API se demorara en encenderse alrededor de 45s)\nSe puede usar Postman en este caso se usar√° Gitbash(simplemente usare los comandos y la comunicacion se realizar√°)\n\n\n\nApp\n\n\nPROBAR LA API (Paso a Paso) Paso 1: Verificar que funcione bash curl https://renderpi.onrender.com\n        Respuesta : {\"status\": \"online\", ...}\nCrear un Reporte Para qu√© sirve: Un ciudadano reporta un problema (bache, basura, etc.) Endpoint: POST /reportes Qu√© necesitas enviar:\ncategoria: Tipo de problema (bache, basura, luminaria, acera_rota) lat: Latitud (ubicaci√≥n en el mapa) lng: Longitud (ubicaci√≥n en el mapa) descripcion: Qu√© est√° pasando usuario_id: Qui√©n est√° reportando foto: Imagen del problema (opcional)\nEjemplo con foto desde tu celular: bash# Subir una foto\ncurl -X POST https://renderpi.onrender.com/reportes\n-F ‚Äúcategoria=bache‚Äù\n-F ‚Äúlat=-0.8131‚Äù\n-F ‚Äúlng=-77.7172‚Äù\n-F ‚Äúdescripcion=Bache muy grande en la avenida‚Äù\n-F ‚Äúusuario_id=juan123‚Äù\n-F ‚Äúfoto=@/ruta/a/foto.jpg‚Äù\nEjemplo usado de codigo en video: curl -X POST https://renderpi.onrender.com/reportes\n-F ‚Äúcategoria=bache‚Äù\n-F ‚Äúlat=-0.8131‚Äù\n-F ‚Äúlng=-77.7172‚Äù\n-F ‚Äúdescripcion=Prueba test endpoint‚Äù\n-F ‚Äúusuario_id=USER-ABC-001‚Äù\n-F ‚Äúfoto=@C:/Users/OneDrive/Escritorio/foto.jpg‚Äù\nL√≠mite de Reportes Regla: Solo puedes hacer 30 reportes por minuto ¬øPor qu√©? Para evitar spam y abusos\nNo Duplicados\nRegla: No puedes reportar el mismo problema 2 veces en\nGRAPHQL (Consultas Avanzadas) Para qu√© sirve: Hacer consultas m√°s complejas de forma m√°s eficiente Endpoint: POST\nSOBRE LAS FOTOS Se guardan en Firebase Storage y esta direccion luego en la base de Datos con todos los registros de reportes\n\nGithub\nhttps://github.com/paulscc/RenderPi\n\nVideo Explicacion\nhttps://youtu.be/czEOuxzFUsY \nAuthor: Cadena Paul"
  }
]